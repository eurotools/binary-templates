//------------------------------------------------
//--- 010 Editor v14.0 Binary Template
//
//      File: Nintendo TPL texture palette (template?) format for the GameCube
//   Authors: Swyter
//   Version: 2023.10.22
//  Category: Game
// File Mask: *.tpl
//  ID Bytes: 00 20 AF 30
//------------------------------------------------

BigEndian(); ThemeAutoScaleColors(false); /* swy: don't wash out colors in dark mode, we want the faithful value */

uint32 magic <format=hex>; /* swy: 00 20 AF 30 */
uint32 texture_count;
uint32 tpl_header_size; /* swy: always 12, seemingly */

local uint saved_offset;

struct
{
    uint32 texture_desc_pos_offset <format=hex>; /* swy: absolute start positions of each structure, or 0 if they are missing (i.e. no palette section because it's unneeded) */
    uint32      palette_pos_offset <format=hex>;
    
    saved_offset = FTell();
    
    if (palette_pos_offset)
    {
        FSeek(palette_pos_offset);
    
        struct
        {
            uint16 pal_color_count;
            uint16 unk_always_zero;
            enum <uint32>
            {
                FMT_PAL_IA8    = 0, /* swy: ??? */
                FMT_PAL_RGB565 = 1,
                FMT_PAL_RGB5A3 = 2,
                FMT_PAL_3      = 3,
                FMT_PAL_4      = 4,
            } pal_color_format;
            uint32 sum_size;
            
                 if (pal_color_count == 16384) ushort stuff[2080 / 2]; /* swy: ??? */
            else if (pal_color_count ==   256) ushort stuff[  64 / 2];
            else if (pal_color_count ==    16) ushort stuff[  34 / 2];
        } palette[texture[0].palette_pos_offset ? 1 : 0] <open=true, optimize=false>;
    }
    
    
    Printf("[dbg] desc offset: %x; computed: %x\n", texture_desc_pos_offset, FTell() + (sizeof(texture) * texture_count));
    FSeek(texture_desc_pos_offset);
    
    struct
    {
        uint16 layer_height,
               layer_width;
        enum <uint32>
        {
            FMT_I4       =  0, /* swy: Greyscale */         /*  4 bits per pixel */
            FMT_I8       =  1, /* swy: Greyscale */         /*  8 bits per pixel */
            FMT_IA4      =  2, /* swy: Greyscale + Alpha */ /*  8 bits per pixel */
            FMT_IA8      =  3, /* swy: Greyscale + Alpha */ /* 16 bits per pixel */
            FMT_RGB565   =  4, /* swy: 565 ; R5G6B5   */    /* 16 bits per pixel */
            FMT_RGB4A3   =  5, /* swy: 4443; R4G4B4A3 */    /* 16 bits per pixel */
            FMT_RGBA8    =  6, /* swy: 8888; R8G8B8A8 */    /* 32 bits per pixel */
            FMT_7        =  7,
            FMT_C4       =  8, /* swy: palette,    16 colours (RGB565-only in Euroland) */ /*  4-bit color indices referencing a color table, whose actual RGB format is described in the palette */
            FMT_C8       =  9, /* swy: palette,   256 colours (RGB565-only in Euroland) */ /*  8-bit color indices */
            FMT_C14X2    = 10, /* swy: palette, 16384 colours (RGB565-only in Euroland) */ /* 14-bit color indices in 16-bit/2-bytes with 2 wasted bits; weird format that was unimplemented in Euroland and mapped to S3TC, D3D doesn't have a D3DFMT_P16, only D3DFMT_P8 */
            FMT_11       = 11,
            FMT_12       = 12,
            FMT_13       = 13,
            FMT_S3TC     = 14, /* swy: S3 Texture Compression, same as DXT1 or BC1, 4x4 texel blocks, 4-bit per texel, two interpolated RGB565 colors (turning them into a palette of 3+alpha or 4 indexed colors) with optionally 1-bit cutout alpha */
            FMT_15       = 15,
            FMT_16       = 16,
        } texel_format;
        uint32 texture_data_pos_offset <format=hex>; /* swy: absolute start position in the binary file of the pixels themselves */
        enum <uint32>
        {
            coords_clamp,
            coords_repeat
        } wrap_s, wrap_t; /* swy: when wrap is on the texture tiles in that UV (same as ST) space dimension, otherwise the border/edge color will appear forever */
        uint32 unk_texel_fmt_result;
        uint32 unk_always_one_uint;
        uint32 unk_always_zero_uint;
        ubyte unk_always_zero_byte;
        ubyte base_lod, last_lod;
        ubyte pad_garbage_data_maybe;
    } texture_descriptor <open=true>;
    
    /* swy: align the texture data to 64-byte sectors for DMA or caching reasons */
    ubyte align_garbage_data[((FTell() + 64-1) & ~(64-1)) - FTell()];
    
    
    FSeek(texture_descriptor.texture_data_pos_offset);
    
    local uint mipmap_count = (texture_descriptor.last_lod - texture_descriptor.base_lod) + 1;
    
    local int i; local uint w, h;
    w = texture_descriptor.layer_width,
    h = texture_descriptor.layer_height;
        
    local float bpp = 2; /* swy: bytes per pixel; 1 byte = 8 bits */
    for (i = texture_descriptor.base_lod; i <= texture_descriptor.last_lod; i++)
    {
        struct
        {
            switch(texture_descriptor.texel_format)
            {
                case FMT_I4:
                case FMT_C4:
                case FMT_S3TC:
                    bpp = 0.5;
                    break;
                case FMT_I8:
                case FMT_IA4:
                case FMT_C8:
                    bpp = 1;
                    break;
                case FMT_IA8:
                case FMT_RGB565:
                case FMT_RGB4A3:
                case FMT_C14X2:
                    bpp = 2;
                    break;
                case FMT_RGBA8:
                    bpp = 4;
                    break;
                default:
                    Warning("FIXME: Unhandled format\n");
            }
            
            Printf("%u: %u x %u x %g\n", i, w, h, bpp);
            
            
            if (texture_descriptor.texel_format == FMT_RGB4A3)
                struct
                {
                    union
                    {
                        struct { ushort flag_as_opaque: 1, a: 3, r: 4, g: 4, b: 4; } transl; /* swy: when flag bit is zero it's translucent */
                        struct { ushort flag_as_opaque: 1,       r: 5, g: 5, b: 5; } opaque; /* swy: when flag bit is one  */
                        
                        local uint red, green, blue, alpha;
                        
                        if (opaque.flag_as_opaque)
                        {
                            red   = (opaque.r << 3) | (opaque.r >> 2);
                            green = (opaque.g << 3) | (opaque.g >> 2);
                            blue  = (opaque.b << 3) | (opaque.b >> 2);
                            alpha = 0x00;
                        }
                        else
                        {
                            red   = (transl.r << 4) | (transl.r >> 0); /* swy: repeat the four bits twice to cover/fill out the eight-bit area [1234][1234], that way 0b1111 ends up being 0b11111111 instead of 0b11110000, which is only half the brightness */
                            green = (transl.g << 4) | (transl.g >> 0);
                            blue  = (transl.b << 4) | (transl.b >> 0);
                            alpha = (transl.a << 5) | (transl.a << 2) | (transl.a >> 1); /* swy: repeat the three bits a bunch of times to cover/fill out the 8 bit area so that whites are full brightness [123][123][12] */
                        };
                        
                        local uint combined = ((alpha << (8*3)) | (blue << (8*2)) | (green << (8*1)) | (red << (8*0))); /* swy: encode them in the ARGB8 color format for 010 Editor */
                        
                    } texel <bgcolor=combined>; // | ((opaque.g << 3 | opaque.g >> 2) << (8*1)) | (opaque.r << 3 | opaque.r >> 2) << (8*0)), optimize=false>;
                } mipmap_data_rgb4a3[w * h] <optimize=false>;
            else
                ubyte mipmap_data[(w * h) * bpp];
            
            
            
            /* swy: halve the size for the next mipmap in the pyramid */
            w /=2; h /= 2;
        } texture_data <optimize=false>;
    }
    
    /* swy: go back and jump to the the next texture array element */
    FSeek(saved_offset);

} texture[texture_count] <open=true, optimize=false, read=Str("[/] [%s] %u x %u (%i mipmap%s)", EnumToString(texture_descriptor.texel_format), texture_descriptor.layer_width, texture_descriptor.layer_height, mipmap_count, (mipmap_count > 2) ? "s" : "")>;