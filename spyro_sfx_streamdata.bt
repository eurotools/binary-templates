//------------------------------------------------
//--- 010 Editor v11.0.1 Binary Template
//
//      File: SpyroStreamSounds.bt
//   Authors: jmarti856, Swyter
//   Version: 1.0
//   Purpose: Parse SFX Streambanks files.
//  Category: Audio
// File Mask: *__streamdata.sfx
//  ID Bytes: 4D 55 53 58
//------------------------------------------------
 
//*===============================================================================================
//* Typedefs for the sfx file
//*===============================================================================================
typedef char ID[4];
typedef char Padding[2];
local int sfxIsBigEndian;

//*===============================================================================================
//* DEFINE STRUCTS USED IN THE SFX FILE
//*===============================================================================================
//The first parameters of the header ara always little endian
LittleEndian(); 
sfxIsBigEndian = 0;

typedef struct 
{
    ID     Magic;
    uint   Hashcode <format=hex>;
    uint   FileVersion;
    uint   FileSize <format=hex>;
	ID     Platform;
	uint   TimeStamp;
	uint   unk;
	uint   structPadding;
	/*For GC*/
	if (ReadUInt() != 0x0800)
	{
        Printf("[i] This is a GameCube SFX. Changing endianness to big-endian.");
        BigEndian(); sfxIsBigEndian = 1;
	}
	else
		LittleEndian();
} CommonHeader;

typedef struct
{
	uint	FileStart1       <format=hex>;
	uint 	FileStart1Length <format=hex>;

	uint 	FileStart2       <format=hex>;
	uint	FileStart2Length <format=hex>;

	uint	FileStart3       <format=hex>;
	uint	FileStart3Length <format=hex>;
} StreamBanksHeader;

//*===============================================================================================
//* READ FILE
//*===============================================================================================
// Define the headers
SetBackColor(cLtPurple);
CommonHeader header;

// Check for valid header
if(header.Magic != "MUSX")
{
    Warning("File is not a valid SFX file. Template stopped.");
    return -1;
}

// Read Streambanks Header
SetBackColor(cGreen);
StreamBanksHeader SBHeader;

//Go to FileStart1 pos
if (FSeek(SBHeader.FileStart1) < 0)
{
	Warning( "Error searching the SFX file start 1 position");
	return -1;
}


typedef uint SBLookUpTable <format=hex>;

local uint totalSounds = SBHeader.FileStart1Length / sizeof(SBLookUpTable);
local uint index = 0;

SetBackColor(cBlue);
SBLookUpTable offsets[totalSounds];

for (index = 0; index < totalSounds; index++)
{
	/* swy: use the lookup table for the current index to compute
            an absolute offset to the right place */
	FSeek(SBHeader.FileStart2 + offsets[index]);

    typedef struct
    {
	    uint MarkerSize  <format=hex>;
	    uint AudioOffset <format=hex>;
	    uint AudioSize   <format=hex>;
    
        /* swy: the following two offsets are relative to this point; the offsets are technically
                not needed, as long as we know the structure sizes and count, because they
                are always continuously stored, right afterwards */
	    uint StartMarkerCount;
	    uint      MarkerCount;
    
	    uint StartMarkerOffset <format=hex>;
	    uint      MarkerOffset <format=hex>;
    
	    uint BaseVolume;
    
        typedef struct
        {
	        uint Name;
	        uint Position;
	        uint MarkerType;
	        uint LoopStart;
	        uint LoopMarkerCount;
	        uint MarkerPosition;
        } StartMarker;
    
        SetBackColor(cAqua); FSeek(startof(StartMarkerCount) + StartMarkerOffset);
        StartMarker StartMarkers[StartMarkerCount];
    
        typedef struct
        {
	         int Name;
	        uint Position;
	        uint MarkerType;
	        uint LoopStart;
	        uint LoopMarkerCount;
        } Marker;
    
        SetBackColor(cLtGreen); FSeek(startof(StartMarkerCount) + MarkerOffset);
        Marker Markers[MarkerCount];
    
        /* swy: the audio data is far away; get there via offset, store as part of our SFX struct and go back */
	    FSeek(SBHeader.FileStart2 + AudioOffset); SetBackColor(cDkRed); byte AudioData[AudioSize];

        local uint cur_index = index; /* swy: save a local copy of the current state of the for loop for future reference and creating the printf-style string */
    } StreamedSound <read=Str("[%i] startmarkers: %u, markers: %u, bufsize: %#x", cur_index*-1-1, StartMarkerCount, MarkerCount, AudioSize), optimize=false>;

    SetBackColor(cLtRed);
	StreamedSound stream;
}