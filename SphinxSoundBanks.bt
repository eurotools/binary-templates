//------------------------------------------------
//--- 010 Editor v11.0.1 Binary Template
//
//      File: SphinxSFXSoundBanks.bt
//   Authors: jmarti856
//   Version: 1.0
//   Purpose: Parse SFX soundbanks files.
//  Category: Audio
// File Mask: *.sfx
//  ID Bytes: 
//   History: 
//------------------------------------------------
 
//*===============================================================================================
//* Typedefs for the sfx file
//*===============================================================================================
typedef char ID[4];
typedef char Padding[2];
local int sfxIsBigEndian;

//*===============================================================================================
//* DEFINE STRUCTS USED IN THE SFX FILE
//*===============================================================================================
//The first parameters of the header ara always little endian
LittleEndian(); 
sfxIsBigEndian = 0;

typedef struct 
{
    ID     Magic;
    uint   Hashcode<format=hex>;
    uint   ConstantOffset<format=hex>;
    uint   FileSize;
	/*For GC*/
	if (ReadUInt() == 0x0800)
	{
		LittleEndian();
	}
	else
	{
		sfxIsBigEndian = 1;
		BigEndian();		
	}
} CommonHeader;

typedef struct
{
	uint	SFXStart<format=hex>;
	uint 	SFXLength;
	uint 	SampleInfoStart<format=hex>;
	uint	SampleInfoLength;
	uint	SpecialSampleInfoStart<format=hex>;
	uint	SpecialSampleInfoLength;
	uint	SampleDataStart<format=hex>;
	uint	SampleDataLength;
} SoundBanksHeader;

typedef struct
{
	uint	HashCode<format=hex>;
	uint 	Location<format=hex>;
} SoundsArray;

typedef struct
{
	short 	DuckerLength;
	short 	MinDelay;
	short 	MaxDelay;
	short 	InnerRadiusReal;
	short 	OuterRadiusReal;
	byte	ReverbSend;
	byte 	TrackingType;
	byte	MaxVoices;
	byte	Priority;
	byte	Ducker;
	byte 	MasterVolume;
	if (IsBigEndian() > 0 && sfxIsBigEndian == 1)
	{
		LittleEndian(); 
	}
	ushort	Flags;
	if (IsLittleEndian() > 0 && sfxIsBigEndian == 1)
	{
		BigEndian();
	}
	short	SamplesCount;
} Sounds;

typedef	struct
{
	short FileRef;
	short PitchOffset;
	short RandomPitchOffset;
	byte BaseVolume;
	byte RandomVolumeOffset;
	byte Pan;
	byte RandomPan;
	Padding SectPadding;
} Samples;

typedef struct
{
	uint 	Flags;
	uint	Address;
	uint 	AudioDataSize<format=hex>;
	uint 	Frequency;
	uint 	RealSize;
	uint	NumChannels;
	uint	Bits;
	uint	PSI;
	uint	LoopOffset;
	if (IsBigEndian() > 0 && sfxIsBigEndian == 1)
	{
		LittleEndian(); 
	}
	uint	Duration;
	if (IsLittleEndian() > 0 && sfxIsBigEndian == 1)
	{
		BigEndian();
	}
} SampleInfo;

typedef struct
{
	uint NumSamples;
	uint NibblesADPCM;
	uint SampleRate;
	ushort LoopFlag;
	ushort Format;
	uint StartOffset;
	uint EndOffset;
	uint unk;
	ushort DecodeCoefficients[16]<format=hex>;
	ushort Gain;
	ushort Predictor;
	ushort SampleHistory;
	ushort SampleHistory2;
	ushort PredictorLoop;
	ushort SampleHistoryLoop;
	ushort SampleHistoryLoop2;
	ushort PaddingSamples[10];
	ushort padding;
} SpecialSample;

//*===============================================================================================
//* READ FILE
//*===============================================================================================
// Define the headers
SetBackColor(cLtPurple);
CommonHeader header;

// Check for valid header
if(header.Magic != "MUSX")
{
    Warning( "File is not a valid SFX file. Template stopped." );
    return -1;
}

// Read Soundbanks Header
SetBackColor(cGreen);
SoundBanksHeader SBHeader;

//Go to SFXStart pos
if (FSeek( SBHeader.SFXStart ) < 0)
{
	Warning( "Error searching the SFX start position");
	return -1;
}

//Get the number of stored sounds in this section
local int totalSounds = ReadUInt(FTell());
FSkip(sizeof(UINT));

//Read SFX Array & SFX Params
local int index = 0;
local int indexSamples = 0;
local long currentPos = 0;
for (index = 0; index < totalSounds; index++)
{
	SetBackColor(cBlue);
    SoundsArray StoredSound;
	currentPos = FTell();
	
	FSeek(StoredSound.Location + SBHeader.SFXStart);
    SetBackColor(cLtRed);
	Sounds sfxParams;
	for (indexSamples = 0; indexSamples < sfxParams.SamplesCount; indexSamples++)
	{
        SetBackColor(cAqua);
		Samples smpParams;
	}
	FSeek(currentPos);
}

//Read Sample Info Section
if (FSeek( SBHeader.SampleInfoStart ) < 0)
{
	Warning( "Error searching the sample info start position");
	return -1;
}

//Get the number of stored samples in this section
local int totalSamples = ReadUInt(FTell());
FSkip(sizeof(UINT));

//Read samples params
index = 0;
for (index = 0; index < totalSamples; index++)
{
	SetBackColor(cLtGreen);
    SampleInfo sampleInfoParams;
	currentPos = FTell();
	
	FSeek(sampleInfoParams.Address + SBHeader.SampleDataStart);
	SetBackColor(cDkRed);
	struct {byte audioData[sampleInfoParams.AudioDataSize]; } a;
	FSeek(currentPos);
}

//Read Special Sample Info Section
if (SBHeader.SampleInfoStart != SBHeader.SpecialSampleInfoStart)
{
	if (FSeek(SBHeader.SpecialSampleInfoStart ) < 0)
	{
		Warning( "Error searching the special sample info start position");
		return -1;
	}
	
	local int totalSpecialSamples = SBHeader.SpecialSampleInfoLength / sizeof(SpecialSample);
	index = 0;
	for (index = 0; index < totalSpecialSamples; index++)
	{
		SetBackColor(cLtGreen);
		SpecialSample specialInfo;
	}
}