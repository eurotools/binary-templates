//------------------------------------------------
//--- 010 Editor v12.0.1k Binary Template
//
//      File: Spyro: A Hero's Tail - GameCube save data (three-slot sections)
//   Authors: Swyter
//   Version: 2022.11.22
//   Purpose: This will probably work for any other GCI saves, I think.
//  Category: Game
// File Mask: *.gci
//------------------------------------------------

BigEndian();

struct
{
    char game_id[6];
    ushort id_b <format=hex>;
    char game_id_b[4];
    byte pad[28];
    uint variable_size_thing <format=hex>;
    uint checksummed_data_begin_offset <format=hex>;
    uint stuff[4] <format=hex>;
    uint checksum <format=hex>; /* swy: from 0x1c0 to data end (0x28040) */


    byte pad_b[380];
    char game_title_str[32];
    char game_descr_str[32];

    byte img_icon[0x2000];
} gci_head;

struct
{
    ubyte slot_a, slot_b, slot_c; ubyte more[5]; char pad[0x1e38];
} eurocom_head;

char game_build_time[32];
char game_build_date[32];

enum<uint> bool         {     off = 0,  enabled = 1 };
enum<uint> cam_reversal {  normal = 0, reversed = 1 };
enum<uint> cam_mode     { passive,       active     };

int slot_count; /* swy: three ¯\_(ツ)_/¯ */
struct
{
    uint slot_checksum_a <format=hex>, /* swy: these don't actually work as normal checksums, */
         slot_checksum_b <format=hex>, /*      the game only checks that slot_checksum_a == slot_a.slot_checksum on load, and so on */
         slot_checksum_c <format=hex>;
    uint slot_save_size  <format=hex>; /* swy: the game says 0xB258, I say 0xb260 */

    struct { int edb_file_hc <format=hex>, zero, zero; } load_files[16] <format=hex>; /* swy: experiment with this. I don't know, yet */

    byte unk_zero_a;
    struct
    {
        byte unk : 1; byte unk : 1; byte unk : 1;
        byte character_select_flame_ember_model_viewer_play_minigame : 1;
        byte character_select_flame_ember_model_viewer : 1; 
        byte character_select_ember_model_viewer : 1;
        byte model_viewer : 1;
        byte concept_art_viewer : 1;
    } unlocked_extras; /* swy: zero: no unlockables; 1, concept art viewer, 2 model viewer/ember, 4 also character select top three, 8/0b1000 spyro/flame/ember, 0b10000 play minigame */
    ushort unlocked_thing_b_maybe;
    uint unk_zero_b;

    float sfx_volume; uint music_volume; /* swy 0-100 */

    cam_reversal first_person_y_axis, sgt_byrd_y_axis, sparx_flying_y_axis;
    cam_mode camera;
    bool rumble_feature;

    enum player_character_id selected_bonus_character_maybe;
    ubyte uninitialized_mem[4];

} common_spyro_save_block;

typedef struct
{
    uint slot_checksum <format=hex>;
    enum<ubyte> { slot_is_active = 1, slot_empty = 0 } slot_active; ubyte zero_pad[3];
    float decimal_something; uint player_char_maybe;

    enum
    {
        /* 0x01       -         .edb                                    */ MapLoading              =  0,
        /* 0x01       -         .edb                                    */ LoadingLoop2D           =  1,
        /* 0x010000D3 -  mr1_blk.edb (Blink minigame 1)                 */ Completely_Swamped      =  2,
        /* 0x01000093 -  mr1_sgt.edb (Sgt Byrd minigame 1)              */ Island_Speedway         =  3,
        /* 0x01000094 -  mr1_spx.edb (Sparx minigame 1)                 */ Cavern_Chaos            =  4,
        /* 0x01000092 -  mr1_spy.edb (Spyro minigame 1)                 */ Critter_Calamity        =  5,
        /* 0x010000C9 -  mr2_blk.edb (Blink minigame 2)                 */ All_Washed_Up           =  6,
        /* 0x010000D7 -  mr2_sgt.edb (Sgt Byrd minigame 2)              */ Cloudy_Speedway         =  7,
        /* 0x010000D6 -  mr2_spx.edb (Sparx minigame 2)                 */ Outlandish_Inlet        =  8,
        /* 0x01000098 -  mr2_spy.edb (Spyro minigame 2)                 */ Turtle_Turmoil          =  9,
        /* 0x010000D4 -  mr3_blk.edb (Blink minigame 3)                 */ Snowed_Under            = 10,
        /* 0x0100009A -  mr3_sgt.edb (Sgt Byrd minigame 3)              */ Iceberg_Aerobatics      = 11,
        /* 0x010000C8 -  mr3_spx.edb (Sparx minigame 3)                 */ Frosty_Flight           = 12,
        /* 0x010000BE -  mr3_spy.edb (Spyro minigame 3)                 */ Iced_TNT                = 13,
        /* 0x010000D5 -  mr4_blk.edb (Blink minigame 4)                 */ Mined_Out               = 14,
        /* 0x010000A3 -  mr4_sgt.edb (Sgt Byrd minigame 4)              */ Lava_Palaver            = 15,
        /* 0x010000B4 -  mr4_spx.edb (Sparx minigame 4)                 */ Sparx_Will_Fly          = 16,
        /* 0x010000BF -  mr4_spy.edb (Spyro minigame 4)                 */ Storming_the_Beach      = 17,
        /* 0x01       -         .edb                                    */ Credits                 = 18,
        /* 0x0100005A -  realm2b.edb (Sunken Ruins)                     */ Sunken_Ruins            = 19,
        /* 0x0100005B -  realm2c.edb (Cloudy Domain)                    */ Cloudy_Domain           = 20,
        /* 0x01       -         .edb                                    */ Cloudy_Domain_b         = 21,
        /* 0x0100003A -  realm1c.edb (Dragonfly Falls)                  */ Dragonfly_Falls         = 22,
        /* 0x01000039 -  realm1b.edb (Crocovile Swamp)                  */ Crocovile_Swamp         = 23,
        /* 0x01000037 -  realm1a.edb (Dragon Village)                   */ Dragon_Village          = 24,
        /* 0x0100006D - r1linkab.edb (Link map: DV to CS)               */ MapR1LinkAB             = 25,
        /* 0x01000082 - r1linkac.edb (Link map: DV to DF (ball gadget)) */ MapR1LinkAC             = 26,
        /* 0x01000008 - hogwarts.edb                                    */ MapExample              = 27, /* swy: Hogwarts castle */
        /* 0x01000058 -  test_dp.edb                                    */ testdp                  = 28,
        /* 0x01       -         .edb                                    */ MapMorphEnv             = 29,
        /* 0x010000A1 -  realm4d.edb (Dark Mine)                        */ Dark_Mine               = 30,
        /* 0x01000038 -  realm3a.edb (Frostbite Village)                */ Frostbite_Village       = 31,
        /* 0x01000087 -  realm1z.edb (Gnasty’s Cave)                    */ Gnastys_Cave            = 32,
        /* 0x01000059 -  realm3c.edb (Ice Citadel)                      */ Ice_Citadel             = 33,
        /* 0x010000ED -  realm4z.edb (Red’s Lair)                       */ Reds_Lair               = 34,
        /* 0x0100005C -  realm3b.edb (Gloomy Glacier)                   */ Gloomy_Glacier          = 35,
        /* 0x0100000E - playroom.edb                                    */ Playroom                = 36,
        /* 0x01000074 -    model.edb                                    */ Model_Viewer            = 37,
        /* 0x0100001D -  test_tl.edb                                    */ Test_TL                 = 38,
        /* 0x0100001B -  test_pb.edb                                    */ Test_PB                 = 39,
        /* 0x010000A2 -  realm4e.edb (Red’s Laboratory)                 */ Reds_Laboratory         = 40,
        /* 0x010000E5 -  realm3z.edb (Red’s Chamber)                    */ Reds_Chamber            = 41,
        /* 0x0100001A -  test_mf.edb                                    */ Test_MF                 = 42,
        /* 0x0100003D -     shop.edb                                    */ Shop                    = 43,
        /* 0x0100005D -  realm4a.edb (Stormy Beach)                     */ Stormy_Beach            = 44,
        /* 0x0100003B -  realm2a.edb (Coastal Remains)                  */ Coastal_Remains         = 45,
        /* 0x01000150 - r2linkab.edb (Link map: CR to SR (elevator))    */ MapR2LinkAB             = 46,
        /* 0x01000151 - r2linkac.edb (Link map: CR to CD (elevator))    */ MapR2LinkAC             = 47,
        /* 0x0100001E -  test_js.edb                                    */ Test_JS                 = 48,
        /* 0x01000009 -  test_ka.edb                                    */ Test_KA                 = 49,
        /* 0x01000007 -  test_nb.edb                                    */ Test_NB                 = 50,
        /* 0x0100015D - test_nb2.edb                                    */ Test_NB2                = 51,
        /* 0x0100000A -  test_sj.edb                                    */ Test_SJ                 = 52,
        /* 0x01       -         .edb                                    */ Platform_Area           = 53, /* Inaccessible - probably removed */
        /* 0x01       -         .edb                                    */ TestBeach               = 54,
        /* 0x01       -         .edb                                    */ TestBall                = 55, /* Inaccessible - probably removed */
        /* 0x01000029 -   titles.edb (Title screen)                     */ Titles                  = 56,
        /* 0x01000154 - r4linkbc.edb (Link map: MM to MFT (elevator))   */ MapR4LinkBC             = 57,
        /* 0x01000156 - r4linkcd.edb (Link map: MFB to DM)              */ MapR4LinkCD             = 58,
        /* 0x01000155 - r4linkde.edb (Link map: DM to RL)               */ MapR4LinkDE             = 59,
        /* 0x0100005E -  realm4b.edb (Molten Mount)                     */ Molten_Mount            = 60,
        /* 0x0100005F -  realm4c.edb (Magma Falls)                      */ Magma_Falls_Top         = 61,
        /* 0x01       -         .edb                                    */ Magma_Falls_Ball_Gadget = 62,
        /* 0x01       -         .edb                                    */ Magma_Falls_Bottom      = 63,
        /* 0x010000EC -  realm2z.edb (Watery Tomb)                      */ Watery_Tomb             = 64
    } cur_map;

    uint zero;

    uint saved_count;
    struct saved_blocks
    {
        ushort id_a <format=hex>, id_b <format=hex>;
        float x, y, z;
        int one <format=hex>, tail_b <format=hex>, start_point_hc <format=hex>, text_prompt_hc <format=hex>;
    } blocks[saved_count], unused_blocks[256-saved_count]; uint pad_align;


    ushort year <bgcolor=0xfff>; ubyte month, day; ubyte hour, minute, second, zero;
    float play_time_in_secs; uint pad;

    enum
    {
        breath_none,
        breath_fire = 1,
        breath_water = 2,
        breath_ice = 4,
        breath_electric = 8,
    } breath_selected;
    uint health, gem_count, gem_counter;

    ubyte lock_pick_count,lock_pick_limit,a,b;

    typedef struct
    {
        ubyte amount, carry_limit, magazine_limit, magazine_amount;
    } element_storage <read=Str("[%02u/%02u, mag: %03u/%03u]", amount, carry_limit, magazine_amount, magazine_limit)>;
    element_storage fire, ice, water, electric;
    
    ushort fire_arrows_count;
    ushort fire_arrows_limit;
    
    struct
    {
        bool abiflg_unk_a : 1;
        bool abiflg_unk_b : 1;
        bool abiflg_unk_c : 1;
        bool abiflg_unk_d : 1;
        bool abiflg_unk_e : 1;
        bool abiflg_unk_f : 1;
        bool abiflg_unk_g : 1;
        bool abiflg_unk_h : 1;
        bool abiflg_unk_i : 1;
        bool abiflg_unk_j : 1;
        bool abiflg_unk_k : 1;
        bool abiflg_unk_l : 1;
        bool abiflg_unk_m : 1;
        bool abiflg_butterfly_jar : 1;
        bool abiflg_horndive_upgrade : 1;
        bool abiflg_wall_kick : 1;
        bool abiflg_wing_shield : 1;
        bool abiflg_shop_sells_everything : 1;
        bool abiflg_invincibility : 1;
        bool abiflg_supercharge : 1;
        bool abiflg_aqualung : 1;
        bool abiflg_unk_n : 1;
        bool abiflg_double_gem : 1;
        bool abiflg_unk_o : 1;
        bool abiflg_water_breath : 1;
        bool abiflg_electric_breath : 1;
        bool abiflg_ice_breath : 1;
        bool abiflg_pole_spin : 1;
        bool abiflg_unk_p : 1;
        bool abiflg_hit_point_upgrade : 1;
        bool abiflg_unk_q : 1;
        bool abiflg_double_jump : 1;
    } ability_flags;
    
    uint unkbb[8] <format=hex>;
    ushort thing, thong, thung, thang, zero_pad_maybe;
    ubyte light_gems, dark_gems, eggs, more;
    ushort alignment_b;
    uint zero;
    float x, y, z; float zeroes[2]; float aa, bb;
    uint trigger_state_bitflags[(0x43b2 / 4) - 8];

    typedef struct
    {
        int start_point_hashcode <format=hex>;
        int one_or_zero;
        int p[10] <format=hex>;
        struct
        {
            int lvl_darkgem_tally, lvl_lightgem_tally, lvl_egg_conceptart_tally, lvl_egg_charviewer_tally, lvl_egg_ember_tally, lvl_egg_flame_tally, lvl_egg_blink_tally, lvl_egg_turret_tally, lvl_egg_sparx_tally, lvl_egg_blink_tally;
        } level_collectible_tallies;
        int one_or_zero_b, f <format=hex>, g;
    } start_point <read=Str("[%x]", start_point_hashcode)>;

    start_point start_point_for_level[200]; /* swy: there's one start point set for level; e.g. if the current map is Dragon_Village (23), the game uses the array element on index 23, each fairy check/restart point is tagged with an unique hashcode: 0x4A000005, 0x4A000006, ... */

    uint alignment_pad_end <format=hex>;

} save_slot <read=Str(
    "[Started: %u-%02u-%02u %02u:%02u:%02u] [Played: %02u:%02u:%02u] [d:%02u/40 l:%03u/100 e:%02u/80] - %s",
    year, month, day, hour, minute, second,
    play_time_in_secs / (60 * 60), (play_time_in_secs % (60. * 60.)) / 60, play_time_in_secs % 60,
    dark_gems, light_gems, eggs, EnumToString(cur_map)
)>;


FSeek(0x04180); struct save_slot slot_a; /* swy: each slot has 0xb260 bytes of available space */
FSeek(0x0f3e0); struct save_slot slot_b;
FSeek(0x1A640); struct save_slot slot_c;

/* -- */

enum player_character_id /* swy: provided by Ebbe */
{
    No_character = 0,
    Spyro = 1,
    Hunter = 2,
    Sparx = 3,
    Blink = 4,
    Sgt_Byrd = 5,
    Ball_gadget = 6,
    Ember = 7,
    Flame = 8
};