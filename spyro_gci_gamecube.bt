//------------------------------------------------
//--- 010 Editor v12.0.1k Binary Template
//
//      File: Spyro: A Hero's Tail - GameCube save data (three-slot sections)
//   Authors: Swyter
//   Version: 2022.11.22
//   Purpose: This will probably work for any other GCI saves, I think.
//  Category: Game
// File Mask: *.gci
//------------------------------------------------

BigEndian();

struct
{
    char game_id[6];
    ushort id_b <format=hex>;
    char game_id_b[4];
    byte pad[28];
    uint variable_size_thing <format=hex>;
    uint checksummed_data_begin_offset <format=hex>;
    uint stuff[4] <format=hex>;
    uint checksum <format=hex>; /* swy: from 0x1c0 to data end (0x28040) */


    byte pad_b[380];
    char game_title_str[32];
    char game_descr_str[32];

    byte img_icon[0x2000];
} gci_head;

struct
{
    ubyte slot_a, slot_b, slot_c; ubyte more[5]; char pad[0x1e38];
} eurocom_head;

char game_build_time[32];
char game_build_date[32];
int three;

enum<uint> bool         {     off = 0,  enabled = 1 };
enum<uint> cam_reversal {  normal = 0, reversed = 1 };
enum<uint> cam_mode     { passive,       active     };

struct
{
    uint dont_know<format=hex>; ubyte unkb[15 - 3];
    struct { int edb_file_hc <format=hex>, zero, zero; } load_files[16] <format=hex>;

    uint thingo, thingu;
    float sfx_volume; uint music_volume; /* swy 0-100 */

    cam_reversal first_person_y_axis, sgt_byrd_y_axis, sparx_flying_y_axis;
    cam_mode camera;
    bool rumble_feature;
    uint unk_one;

    ubyte uninitialized_mem[4]; uint dont_know_b <format=hex>; uint rev_one;


    float decimal_something; uint unk_one, unk_thirty, unk_zero;
    uint saved_count;
    struct
    {
        ushort id_a <format=hex>, id_b <format=hex>;
        float x, y, z;
        int one <format=hex>, tail_b <format=hex>, start_point_hc <format=hex>, text_prompt_hc <format=hex>;
    } saved_blocks[saved_count];

} common_spyro_save_block;

typedef struct
{
    ushort year <bgcolor=0xfff>; ubyte month, day; ubyte hour, minute, second, zero;
    float play_time_in_secs; uint pad;

    enum
    {
        breath_none,
        breath_fire = 1,
        breath_water = 2,
        breath_ice = 4,
        breath_electric = 8,
    } breath_selected;
    uint health, gem_count, gem_counter;

    ubyte lock_pick_count,lock_pick_limit,a,b;

    typedef struct { ubyte amount, carry_limit, magazine_limit, magazine_amount; } element_storage <read=Str("[%02u/%02u, mag: %03u/%03u]", amount, carry_limit, magazine_amount, magazine_limit)>;
    element_storage fire, ice, water, electric;
    
    ushort fire_arrows_count;
    ushort fire_arrows_limit;
    
    struct
    {
        bool abiflg_unk_a : 1;
        bool abiflg_unk_b : 1;
        bool abiflg_unk_c : 1;
        bool abiflg_unk_d : 1;
        bool abiflg_unk_e : 1;
        bool abiflg_unk_f : 1;
        bool abiflg_unk_g : 1;
        bool abiflg_unk_h : 1;
        bool abiflg_unk_i : 1;
        bool abiflg_unk_j : 1;
        bool abiflg_unk_k : 1;
        bool abiflg_unk_l : 1;
        bool abiflg_unk_m : 1;
        bool abiflg_butterfly_jar : 1;
        bool abiflg_horndive_upgrade : 1;
        bool abiflg_wall_kick : 1;
        bool abiflg_wing_shield : 1;
        bool abiflg_shop_sells_everything : 1;
        bool abiflg_invincibility : 1;
        bool abiflg_supercharge : 1;
        bool abiflg_aqualung : 1;
        bool abiflg_unk_n : 1;
        bool abiflg_double_gem : 1;
        bool abiflg_unk_o : 1;
        bool abiflg_water_breath : 1;
        bool abiflg_electric_breath : 1;
        bool abiflg_ice_breath : 1;
        bool abiflg_pole_spin : 1;
        bool abiflg_unk_p : 1;
        bool abiflg_hit_point_upgrade : 1;
        bool abiflg_unk_q : 1;
        bool abiflg_double_jump : 1;
    } ability_flags;
    
    uint unkbb[0xA];
    ushort alignment;
    ubyte light_gems, dark_gems, eggs, more;
    ushort alignment_b;
    uint unkcc[0x43b2 / 4];

    struct { uint p[50 / 4] <format=hex>, e[50/4] <format=hex>; uint a; } huge_blocks[200];

    uint intro [3] <format=hex>;

    float decimal_something; uint a, b, c;
    uint saved_count;
    struct
    {
        ushort id_a <format=hex>, id_b <format=hex>;
        float x, y, z;
        int one <format=hex>, tail_b <format=hex>, start_point_hc <format=hex>, text_prompt_hc <format=hex>;
    } saved_blocks[saved_count];

} save_slot <read=Str(
    "[Started: %u-%02u-%02u %02u:%02u:%02u] [Played: %02u:%02u:%02u] [d:%02u/40 l:%03u/100 e:%02u/80]",
    year, month, day, hour, minute, second,
    play_time_in_secs / (60 * 60), (play_time_in_secs % (60. * 60.)) / 60, play_time_in_secs % 60,
    dark_gems, light_gems, eggs
)>;


FSeek(0x061A0); struct save_slot slot_a; /* swy: each slot has 0xb260 bytes of available space */
FSeek(0x11400); struct save_slot slot_b;
FSeek(0x1C660); struct save_slot slot_c;



enum player_character_id /* swy: provided by Ebbe */
{
    No_character = 0,
    Spyro = 1,
    Hunter = 2,
    Sparx = 3,
    Blink = 4,
    Sgt_Byrd = 5,
    Ball_gadget = 6,
    Ember = 7,
    Flame = 8
};