//------------------------------------------------
//--- 010 Editor v12.0.1k Binary Template
//
//      File: Spyro: A Hero's Tail - GameCube save data (three-slot sections)
//   Authors: Swyter
//   Version: 2022.11.22
//   Purpose: This will probably work for any other GCI saves, I think.
//  Category: Game
// File Mask: *.gci
//------------------------------------------------

BigEndian();

struct
{
    char game_id[6];
    ushort id_b <format=hex>;
    char game_id_b[4];
    byte pad[28];
    uint variable_size_thing <format=hex>;
    uint checksummed_data_begin_offset <format=hex>;
    uint stuff[4] <format=hex>;
    uint checksum <format=hex>; /* swy: from 0x1c0 to data end (0x28040) */


    byte pad_b[380];
    char game_title_str[32];
    char game_descr_str[32];

    byte img_icon[0x2000];
} gci_head;

struct
{
    ubyte slot_a, slot_b, slot_c; ubyte more[5]; char pad[0x1e38];
} eurocom_head;

char game_build_time[32];
char game_build_date[32];
int three;

int common_spyro_save_block[400] <format=hex>;

typedef struct
{
    ushort year <bgcolor=0xfff>; ubyte month, day; ubyte hour, minute, second, zero;
    float play_time_in_secs; uint pad;

    enum
    {
        breath_none,
        breath_fire = 1,
        breath_water = 2,
        breath_ice = 4,
        breath_electric = 8,
    } breath_selected;
    uint health, gem_count, gem_counter;

    ubyte a,b,c,d;

    struct element_storage { ubyte amount, carry_limit, magazine_limit, magazine_amount; };
    element_storage fire, ice, water, electric;

    uint unkbb[(0x3a - 8) / 4];
    ushort alignment;
    ubyte light_gems, dark_gems, eggs, more;
    ushort alignment_b;
    uint unkcc[0x43b2 / 4];

    struct { uint p[50 / 4] <format=hex>, e[50/4] <format=hex>; uint a; } huge_blocks[200];

    uint intro [31/4] <format=hex>; uint colr_count;
    struct { uint p <format=hex>; float x, y, z; uint a <format=hex>, e<format=hex>,i<format=hex>,o <format=hex>; } colr_blocks[colr_count];
} save_slot <read=Str(
    "[Started: %u-%02u-%02u %02u:%02u:%02u] [Played: %02u:%02u:%02u] [d:%02u/40 l:%03u/100 e:%02u/80]",
    year, month, day, hour, minute, second,
    play_time_in_secs / (60 * 60), (play_time_in_secs % (60. * 60.)) / 60, play_time_in_secs % 60,
    dark_gems, light_gems, eggs
)>;


FSeek(0x061A0); struct save_slot slot_a;
FSeek(0x11400); struct save_slot slot_b;
FSeek(0x1C660); struct save_slot slot_c;



enum player_character_id /* swy: provided by Ebbe */
{
    No_character = 0,
    Spyro = 1,
    Hunter = 2,
    Sparx = 3,
    Blink = 4,
    Sgt_Byrd = 5,
    Ball_gadget = 6,
    Ember = 7,
    Flame = 8
};