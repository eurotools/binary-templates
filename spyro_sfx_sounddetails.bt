//------------------------------------------------
//--- 010 Editor v11.0.1 Binary Template
//
//      File: SpyroSoundDetails.bt
//   Authors: jmarti856, Swyter
//   Version: 1.0
//   Purpose: Parse Temporary SFX files.
//  Category: Audio
// File Mask: *__sounddetails.sfx
//  ID Bytes: 4D 55 53 58
//------------------------------------------------
//*===============================================================================================
//* Typedefs for the sfx file
//*===============================================================================================
typedef char ID[4];

//*===============================================================================================
//* DEFINE STRUCTS USED IN THE SFX FILE
//*===============================================================================================
//The first parameters of the header ara always little endian
LittleEndian(); 

typedef struct 
{
    ID     Magic;
    uint   Hashcode <format=hex>;
    uint   FileVersion;
    uint   FileSize <format=hex>;

	ID     Platform;
	uint   TimeStamp;
	uint   unk;
	uint   structPadding;
} CommonHeader;

typedef struct
{
	uint	FirstHashCode<format=hex>;
	uint 	 LastHashCode<format=hex>;
} HashCodesLimits; /* swy: As the hashcodes listed here must seemingly must be contiguous we can simply do (LastHashCode - FirstHashCode) to get the total amount of entries in the list. i.e. 0x1AF006CD - 0x1AF00000 = 1741 */

typedef struct
{
	ushort InnerRadius, OuterRadius; float Duration; ubyte Looping,Tracking3d,SampleStreamed,Is3D;
} SoundData <read=Str(" %u %u %f - %u/%u/%u/%u", InnerRadius, OuterRadius, Duration, Looping, Tracking3d, SampleStreamed, Is3D)>;

//*===============================================================================================
//* READ FILE
//*===============================================================================================
// Define the headers
SetBackColor(cLtPurple);
CommonHeader header;

// Check for valid header
if(header.Magic != "MUSX")
{
    Warning( "File is not a valid SFX file. Template stopped." );
    return -1;
}

//Read the minimum and maximum hashcode
SetBackColor(cGreen);
HashCodesLimits data;

/* swy: for some reason the HashCodesLimits are also little-endian, probably not read by the game (?) */
if (header.Platform[0] == 'G' && header.Platform[1] == 'C') /* For GC */
{
    Printf("[i] This is a GameCube SFX. Changing endianness to big-endian.");
    BigEndian();
}

SetBackColor(cBlue);
while (!FEof())
{
	SoundData sndData;
}