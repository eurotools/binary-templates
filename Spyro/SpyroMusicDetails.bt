//------------------------------------------------
//--- 010 Editor v11.0.1 Binary Template
//
//      File: SpyroProjectDetails.bt
//   Authors: jmarti856, Swyter
//   Version: 1.0
//   Purpose: Parse Temporal SFX files.
//  Category: Audio
// File Mask: __musicdetails.sfx
//  ID Bytes: 4D 55 53 58
//------------------------------------------------
//*===============================================================================================
//* Typedefs for the sfx file
//*===============================================================================================
typedef char ID[4];

//*===============================================================================================
//* DEFINE STRUCTS USED IN THE SFX FILE
//*===============================================================================================
//The first parameters of the header ara always little endian
LittleEndian(); 

typedef struct 
{
    ID     Magic;
    uint   Hashcode <format=hex>;
    uint   FileVersion;
    uint   FileSize <format=hex>;
	ID     Platform;
	uint   TimeStamp;
	uint   unk;
	uint   structPadding;
} CommonHeader;

typedef struct
{
	uint	MinHashCode<format=hex>;
	uint 	MaxhashCode<format=hex>;
} HashCodesLimits <read=Str("[/] first: %#10x, last: %#10x", MinHashCode, MaxhashCode)>;

typedef struct
{
	uint 	MusicHashCode <format=hex>;
	float 	DurationInSeconds;
	uint 	MusicLooping;
	uint 	Uservalue;
} MusicData <read=Str("%#010x | %fs looping: %u user: %u", MusicHashCode, DurationInSeconds, MusicLooping, Uservalue)>;

//*===============================================================================================
//* READ FILE
//*===============================================================================================
// Define the headers
SetBackColor(cLtPurple);
CommonHeader header;

// Check for valid header
if(header.Magic != "MUSX")
{
    Warning( "File is not a valid SFX file. Template stopped." );
    return -1;
}

//Read the minimum and maximum hashcode
SetBackColor(cGreen);
HashCodesLimits data;

local int TotalItems = (header.FileSize - 48)/16;
local int index = 0;

SetBackColor(cBlue);

while (!FEof()) /* swy: read entries until we reach the end of the file; we could also potentially check for the last hashcode (i.e. MaxhashCode) */
{
	MusicData musData;
}