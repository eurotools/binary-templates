//------------------------------------------------
//--- 010 Editor v11.0.1 Binary Template
//
//      File: SpyroSoundDetails.bt
//   Authors: jmarti856, Swyter
//   Version: 1.0
//   Purpose: Parse Temporary SFX files.
//  Category: Audio
// File Mask: *.sfx
//  ID Bytes: 
//   History: 
//------------------------------------------------
//*===============================================================================================
//* Typedefs for the sfx file
//*===============================================================================================
typedef char ID[4];

//*===============================================================================================
//* DEFINE STRUCTS USED IN THE SFX FILE
//*===============================================================================================
//The first parameters of the header ara always little endian
LittleEndian(); 

typedef struct 
{
    ID     Magic;
    uint   Hashcode<format=hex>;
    uint   FileVersion<format=hex>;
    uint   FileSize;
	ID     Platform;
	uint   TimeSpan;
	uint   unk;
	uint   structPadding;
} CommonHeader;

typedef struct
{
	uint	FirstHashCode<format=hex>;
	uint 	 LasthashCode<format=hex>;
} HashCodesLimits; /* swy: As the hashcodes listed here must seemingly must be contiguous we can simply do (LastHashCode - FirstHashCode) to get the total amount of entries in the list. i.e. 0x1AF006CD - 0x1AF00000 = 1741 */

typedef struct
{
	ushort a, b; float thing; ubyte p,q,r,s;
} MusicData <read=Str(" %u %u %f - %u/%u/%u/%u", a, b, thing, p, q, r, s)>;

//*===============================================================================================
//* READ FILE
//*===============================================================================================
// Define the headers
SetBackColor(cLtPurple);
CommonHeader header;

// Check for valid header
if(header.Magic != "MUSX")
{
    Warning( "File is not a valid SFX file. Template stopped." );
    return -1;
}

//Read the minimum and maximum hashcode
SetBackColor(cGreen);
HashCodesLimits data;

SetBackColor(cBlue);
while (!FEof())
{
	MusicData musData;
}